#! /bin/bash

set -e

out_report=sum.org
out_tmp=sum.org.tmp
out_report_fail=sum.org.fail
out_report_pass=sum.org.pass

me=$0

sep() {
    head -c $1 < /dev/zero | tr '\0' "$2"
}

esep() {
    sep "$@"
    echo
}

stderr () {
  local i
  for i
  do
    echo "$i"
  done | sed -e "s,^,$me: ," >&2
}

rapport_head() {
    # Initialize the output file
    cat >"$out_report"<<.
#+OPTIONS: toc:2
#+TODO: FAIL EPIC-FAIL | PASS SKIP
.
    cat >$out_report_pass<<.
* Passed Tests
.
    cat >$out_report_fail<<.
* Failed Test
.
    rm -f $out_report_tmp
}
rapport_tail() {
    cat $out_report_fail >>$out_report
    cat $out_report_pass >>$out_report
    rm -f $out_report_fail $out_report_pass $out_report_tmp out.exp out.eff err.eff
}

inc_nb_test() {
    nb_test=$((nb_test + 1))
}
reset_nb_test() {
    nb_fail_test=0
    nb_test=0
}

print_nb_tests() {
    echo -ne "[$nb_fail_test/$nb_test"
}


res() {
    echo -ne "\r[`tput setaf $1`$2`tput init`] "
    print_nb_tests
    echo -ne "] $3"

    # Clean the view, if needed
    local test_sum_="$nb_test$nb_fail_test"
    local test_sum_length=$((8 - ${#test_sum_}))

    if [ $test_sum_length -gt 0 ]; then
        sep $test_sum_length " "
    fi
    echo
}

print_status() {
    exit_status=$1
    shift
    file_name=$1
    shift
    if [ "x$exit_status" != "x0" ]; then
        if [ "x$exit_status" = "x77" ]; then
            res 3 "skip" "$file_name"
        else
            if [ "x$exit_status" = "x99" ]; then
                res 1 "epic fail" "$file_name"
            else
                res 1 "fail" "$file_name"
            fi
        fi
    else
        res 2 " ok " "$file_name"
    fi
}

#######
# run #
#######
run() {
    echo -ne '\r'
    print_nb_tests
    inc_nb_test
    test_number=$(($test_number + 1))
    local sta_exp=$1
    shift
    local out_report_exp=$1
    shift
    case $out_report_exp in
        ('') : >out.exp;;
        (-) cat >out.exp;;
        (out.exp|stdout);;
        (*)
            cat >out.exp <<.
$out_report_exp
.
            ;;
    esac
    local name="$1"
    shift
    local cmd="$1"
    shift
    local sta_eff=0
    fail=false
    # Run and check the output code
    ($cmd "$@")>out.eff 2>err.eff          \
        || sta_eff=$?

    # Check the diff
    if [ ! $sta_eff -eq $sta_exp ]; then
        fail=true
    fi

    if ! cmp -s out.eff out.exp; then
        fail=true
    fi

    ####################
    # Write the report #
    ####################
    if $fail; then
        nb_fail_test=$((nb_fail_test + 1))
        {
            ###############
            # Fail Status #
            ###############
            cat <<.
** FAIL =$name=
#+BEGIN_SRC sh
  $cmd $@
#+END_SRC
.
            # Exit Code
            if [ ! $sta_eff -eq $sta_exp ]; then
                cat <<.
*** Exit Codes
    - Expected :: $sta_exp
    - Effective :: $sta_eff
.
            else
                cat <<.
*** Exit Code
    - Expected :: $sta_exp
.
            fi

            # Outputs
            # Display the expected standard output
            cat <<.
*** Expected Standard Output
#+BEGIN_EXAMPLE
$(if test "x$(stat -c%s "out.exp")" = "x0"; then
      echo No output
  else
      cat out.exp
  fi
)
#+END_EXAMPLE
.
            # If an error appends display the effective one and the
            # error output.
            if ! cmp -s out.eff out.exp; then
                cat <<.
*** Effective Standard Output
#+BEGIN_EXAMPLE
$(if test "x$(stat -c%s "out.eff")" = "x0"; then
      echo No output
  else
      cat out.eff
  fi
)
#+END_EXAMPLE
*** Diff Between Effective and Expected Outputs
#+BEGIN_EXAMPLE
$(diff out.exp out.eff && echo No diff)
#+END_EXAMPLE

*** Effective Error Output
#+BEGIN_EXAMPLE
$(if test "x$(stat -c%s "err.eff")" = "x0"; then
      echo No output
  else
      cat err.eff
  fi
)
#+END_EXAMPLE
.
            fi
        }>>$out_report_fail
    else
        {
            ##################
            # Success Status #
            ##################
            cat <<.
** PASS =$name=
#+BEGIN_SRC sh
     $cmd $@
#+END_SRC
*** Exit Code
    - Expected :: $sta_exp
*** Standard Output
#+BEGIN_EXAMPLE
$(if test "x$(stat -c%s "out.exp")" = "x0"; then
      echo No Output
  else
      cat out.exp
  fi
)
#+END_EXAMPLE
*** Error Output
$(if test "x$(stat -c%s "err.eff")" = "x0"; then
      echo No Output
  else
      cat out.exp
  fi
)

.
        }>>$out_report_pass
    fi
}

iter() {
    nb_elt=$((${#opt[@]} - 1))
    power=$((2**${#opt[@]} - 1))

    for i in `seq 0 $power`; do
        opt_list=
        for j in `seq 0 $nb_elt`; do
            lol=$i

            for k in `seq 1 $j`; do
                lol=$(($lol / 2))
            done

            if [ $(($lol % 2)) -eq 1 ]; then
                opt_list="$opt_list -${opt[$j]}"
            fi
        done

        eval "$1" $opt_list
    done
}

reset_nb_test
